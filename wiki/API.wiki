#summary Internals overview and API

= Introduction =

The POISE pipeline consists of generators. Normally one or more generators will be embedded in other generators. To get sound information, a generator is called, and a buffer is asked for. The buffer with the rendered data is returned. For instance

{{{
Python 2.5.2 Stackless 3.1b3 060516 (python-2.52:61022, Feb 27 2008, 16:52:03) 
[GCC 4.0.1 (Apple Computer, Inc. build 5341)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
>>> import poise
>>> gen = poise.osc.sine(freq=881, gain=-3)
>>> gen
<osc.sine object at 0x1d55390>
}}}


This buffer is used over and over again on subsequent calls, and will be modified inplace. Using send(), we send the generator a size, and it will render into the buffer that part of the wave, and return the same buffer again. The buffer will probably be longer than the rendered data.

{{{
>>> gen.send( 100 )
array([ 0.        ,  0.08126858,  0.16146266,  0.24003285,  0.31490079,
        0.38560531,  0.4516297 ,  0.51122761,  0.56406623,  0.60972321,
        0.64699072,  0.67570394,  0.69558454,  0.7061066 ,  0.70726931,
        0.6990419 ,  0.68157208,  0.6548847 ,  0.61968577,  0.57629353,
        0.52491766,  0.46691716,  0.40274316,  0.33276525,  0.25883418,
        0.18148091,  0.10119096,  0.02008784, -0.06182181, -0.14237113,
       -0.22103825, -0.29727563, -0.36906689, -0.43597856, -0.49751219,
       -0.55204034, -0.59926963, -0.63880986, -0.66961509, -0.691567  ,
       -0.70442957, -0.7078625 , -0.70186555, -0.68659735, -0.66225135,
       -0.62890011, -0.58742601, -0.53818506, -0.4814305 , -0.41866377,
       -0.35036165, -0.27692741, -0.20030385, -0.12103163, -0.03961754,
        0.04178575,  0.12317114,  0.20238599,  0.278925  ,  0.35224727,
        0.42041332,  0.48302078,  0.53959364,  0.58863539,  0.62989444,
        0.66301584,  0.68712354,  0.70214629,  0.70789248,  0.70421004,
        0.69109929,  0.66890699,  0.63787073,  0.5981105 ,  0.55067801,
        0.49596471,  0.43426532,  0.36721176,  0.29530308,  0.21897389,
        0.14024293,  0.05965774, -0.02225878, -0.1033401 , -0.18357955,
       -0.26085451, -0.33468071, -0.40452749, -0.46854752, -0.52637261,
       -0.57755244, -0.62073302, -0.65570658, -0.68215615, -0.69938201,
       -0.70736092, -0.7059468 , -0.69517714, -0.6750527 , -0.646106  ])
>>> len(gen.send( 100 ))
100

}}}

= Applying Layers =

We can take that generator and embed it in a processor, like an envelope. There are 'oscillators' which are really just processors. They take as a parameter (usually first), their _source generator_. And then before rendering a buffer result, they gather the source data from this souce generator.

so for example, in the case above we could apply an envelope around the wave:

{{{
>>> gen = poise.osc.sine(freq=440, gain=-3)
>>> gen2 = poise.envelope.adsr( gen, attack=0.1, decay=1.0, sustain=0.0, release=4.0 )
>>> gen2.send(100)
array([  0.00000000e+00,   6.46563917e-07,   1.29396554e-06,
         1.94005717e-06,   2.58268953e-06,   3.21970889e-06,
         3.84897835e-06,   4.46836660e-06,   5.07577775e-06,
         5.66913083e-06,   6.24639566e-06,   6.81270121e-06,
         7.35156714e-06,   7.86851307e-06,   8.36170673e-06,
         8.82941330e-06,   9.26994792e-06,   9.68172973e-06,
         1.00632669e-05,   1.04131361e-05,   1.07300461e-05,
         1.10127742e-05,   1.12629542e-05,   1.14736628e-05,
         1.16472493e-05,   1.17829475e-05,   1.18801373e-05,
         1.19383335e-05,   1.19571388e-05,   1.19363315e-05,
         1.18757757e-05,   1.17755095e-05,   1.16356632e-05,
         1.14535378e-05,   1.12350198e-05,   1.09781824e-05,
         1.06837101e-05,   1.03523869e-05,   9.98516295e-06,
         9.58307415e-06,   9.14730936e-06,   8.67914830e-06,
         8.18000375e-06,   7.64391898e-06,   7.08710901e-06,
         6.50420022e-06,   5.89699386e-06,   5.26740208e-06,
         4.61740919e-06,   3.94908571e-06,   3.26455532e-06,
         2.56602724e-06,   1.85575490e-06,   1.13603639e-06,
         3.99486698e-07,  -3.32061302e-07,  -1.06588652e-06,
        -1.79955512e-06,  -2.53063563e-06,  -3.25668690e-06,
        -3.97527044e-06,  -4.68397181e-06,  -5.38038740e-06,
        -6.06215133e-06,  -6.72692412e-06,  -7.38067007e-06,
        -8.00434696e-06,  -8.60431593e-06,  -9.17848815e-06,
        -9.72482105e-06,  -1.02413857e-05,  -1.07263146e-05,
        -1.11778672e-05,  -1.15943718e-05,  -1.19743062e-05,
        -1.23201309e-05,  -1.26221714e-05,  -1.28836995e-05,
        -1.31036347e-05,  -1.32810800e-05,  -1.34152232e-05,
        -1.35054452e-05,  -1.35512202e-05,  -1.35522113e-05,
        -1.35081894e-05,  -1.34191029e-05,  -1.32825517e-05,
        -1.31031597e-05,  -1.28794348e-05,  -1.26118920e-05,
        -1.23012411e-05,  -1.19482914e-05,  -1.15540328e-05,
        -1.11195885e-05,  -1.06462043e-05,  -1.01352865e-05,
        -9.58834204e-06,  -8.99878424e-06,  -8.38447305e-06,
        -7.73948128e-06])
}}}